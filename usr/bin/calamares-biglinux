#!/bin/bash

# Set up translation environment
export TEXTDOMAINDIR="/usr/share/locale"
export TEXTDOMAIN=calamares-biglinux


user=$(ls /home)

# Determine the appropriate text editor
if [ -f /usr/bin/kate ]; then
    text_editor="kate"
elif [ -f /usr/bin/xed ]; then
    text_editor="xed"
elif [ -f /usr/bin/gnome-text-editor ]; then
    text_editor="gnome-text-editor"
fi

# Show a progress window if biglinux-verify is running
if [ "$(ps -e | grep biglinux-verify)" != "" ]; then
    windowID="$(xprop -root '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)"
    sleep 600 | zenity --attach="$windowID" --width=300 --progress --title=$"Please wait..." --pulsate --no-cancel --auto-close --text $"Checking the integrity of the download and storage device..." &
fi

while [ "$(ps -e | grep biglinux-verify)" != "" ]; do
    sleep 1
done

# Close the progress window
killall zenity

# Verify checksum if not already done
if [ ! -f "/tmp/checksum_biglinux_ok.html" ]; then
    /usr/bin/biglinux-verify-md5sum
    if [ -f "/tmp/md5sum_big_fail" ]; then
        exit 1
    fi
fi

# Alert the user if the ISO is older than 30 days if not using community version
if [ "$(echo $(( $(date +%s) / 86400 )))" -gt "$(( $(cat /etc/big-release | grep UNIX_TIMESTAMP= | cut -d "=" -f2) + 30 ))" ]  && ! grep -qi community /etc/os-release; then
    yad --image=emblem-warning --image-on-top --form --width=500 --height=100 --fixed \
    --align=center \
    --field=$"<b>Do you want to proceed with the installation of this old version anyway?</b>
    :LBL" \
    --text $"BigLinux is a system with weekly updates and this version was released more than a month ago.\nWe recommend downloading a more recent version.
    " \
    --button=$"Continue":0 \
    --button=$"Close":1 \
    --center --on-top --borders=20 --title=$"Outdated Version" \
    --window-icon=emblem-warning

    if [ "$?" = "1" ]; then
        exit 1
    fi
fi

# Disable all swap partitions except zram
for diskswap in $(blkid | grep 'TYPE="swap"' | grep -v zram | cut -f1 -d:); do
    swapoff $diskswap
done

# Configure Calamares if not already configured
if [ ! -f "/etc/calamares/biglinux" ]; then

# Create welcome configuration
echo '---
showSupportUrl:         false
showKnownIssuesUrl:     false
showReleaseNotesUrl:    false

requirements:
    internetCheckUrl: https://google.com
    requiredStorage:    4
    requiredRam:        0.5
    check:
      - storage
      - ram
      - power
      - internet
      - root
    required:
      - storage
      - ram
      - root

geoip:
    style:    "none"
    url:      "https://geoip.kde.org/v1/ubiquity"
    selector: "CountryCode"
      ' > /etc/calamares/modules/welcome.conf

    # Force btrfs compression using zstd
    sed -i '/filesystem: btrfs/!b; :a; n; /^\s\{6\}options:/ s/defaults.*/defaults, noatime, compress-force=zstd:9 ]\n      ssdOptions: [ discard=async ]\n      hddOptions: [ autodefrag ]/; ta' /usr/share/calamares/modules/mount.conf

    # Set btrfs as the default filesystem
    sed -i 's|defaultFileSystemType.*"ext4"|defaultFileSystemType:  "btrfs"|g' /usr/share/calamares/modules/partition.conf

    # Ensure services.conf has the necessary entries
    if [ "$(cat /etc/calamares/modules/services.conf | wc -l)" -lt "15" ]; then

    echo 'services:
    - name: bluetooth
      mandatory: false

    - name: cronie
      mandatory: false

    - name: ModemManager
      mandatory: false

    - name: NetworkManager
      mandatory: false

    - name: cups
      mandatory: false

    - name: haveged
      mandatory: false

    - name: fstrim.timer
      mandatory: false

    - name: pkgfile-update.timer
      mandatory: false

    - name: vboxservice
      mandatory: false

    - name: ufw
      mandatory: false

    - name: nmb
      mandatory: false

    - name: smb
      mandatory: false

    - name: set-cfs-tweaks
      mandatory: false

    - name: dnsmasq
      mandatory: false

    - name: cups-browsed
      mandatory: false

    - name: sddm
      mandatory: false

targets:
    - name: "graphical"
      mandatory: true

disable:
    - name: pacman-init
      mandatory: false' > /etc/calamares/modules/services.conf

    fi

    # Remove any 'timers:' lines from services.conf
    sed -i 's|timers:||g' /etc/calamares/modules/services.conf

    # Configure user settings
    echo "
---
defaultGroups:
    - cdrom
    - floppy
    - audio
    - dip
    - video
    - plugdev
    - netdev
    - lpadmin
    - scanner
    - bluetooth
    - vboxsf
    - sambashare
    - input
    - scard
    - lp
    - network
    - power
    - sys
    - wheel
autologinGroup:  autologin
doAutologin:     false
sudoersGroup:    wheel
setRootPassword: false
doReusePassword: false
availableShells: /bin/bash, /bin/zsh
avatarFilePath:  ~/.face
userShell:       /bin/bash
passwordRequirements:
    nonempty: true" > /etc/calamares/modules/users.conf

    # Clean postcfg
    echo '---
keyrings:' > /etc/calamares/modules/postcfg.conf

    # Add all keys except puring and trustdb in postcfg
    cd /usr/share/pacman/keyrings
    for keyfile in $(ls -1 *.gpg | grep -v -e pubring.gpg -e trustdb.gpg); do
        echo "    - ${keyfile%%.gpg}" >> /etc/calamares/modules/postcfg.conf
    done
    cd -

    # General Calamares settings
    echo '---
modules-search: [ local ]

sequence:
    - show:
        - welcome
        - locale
        - keyboard
        - partition
        - users
        - summary
    - exec:
        - partition
        - mount
        - unpackfs
        - networkcfg
        - machineid
        - fstab
        - locale
        - keyboard
        - localecfg
        - luksopenswaphookcfg
        - luksbootkeyfile
        - initcpiocfg
        - initcpio
        - users
        - displaymanager
        - mhwdcfg
        - hwclock
        - services
        - grubcfg
        - bootloader
        - grubcfg-fix
        - postcfg
        - btrfs-fix
        - umount
    - show:
        - finished   

branding: biglinux

prompt-install: true

dont-chroot: false
oem-setup: false
disable-cancel: false
disable-cancel-during-exec: false
quit-at-end: false' > /etc/calamares/settings.conf

    # Remove mhwdcfg if using free drivers
    if grep -q driver=free /proc/cmdline; then
        sed -i '/- mhwdcfg/d' /etc/calamares/settings.conf
    fi

    # Mark Calamares as configured
    > /etc/calamares/biglinux
fi

# Disable pacman-key population in postcfg
sed -i '/init_keyring/s/^/#/' /usr/lib/calamares/modules/postcfg/main.py
sed -i '/self.populate_keyring/s/^/#/' /usr/lib/calamares/modules/postcfg/main.py

# Prepare to save EFI partitions
rm -f /tmp/efi-partitions
mkdir -p /boot/efi

# Determine the live boot device
DEVICE_LIVE_BOOT_TMP="$(readlink -f "$(df -h /run/miso/bootmnt/ | awk '{ print $1 }' | grep '/dev/')" | sed 's|/dev/||'g)"
if [ "$(echo "$DEVICE_LIVE_BOOT_TMP" | grep dm)" != "" ];
then
    DEVICE_LIVE_BOOT="$(ls /sys/block/${DEVICE_LIVE_BOOT_TMP}/slaves | sed 's|[0-9]||g')"
else
    DEVICE_LIVE_BOOT="$DEVICE_LIVE_BOOT_TMP"
fi

# Identify EFI partitions excluding the live boot device
for i in $(LANGUAGE=C fdisk -l | grep -e "EFI System" -e "FAT" | cut -f1 -d" " | grep -v "$DEVICE_LIVE_BOOT")
do
    umount -l /boot/efi
    mount "$i" /boot/efi
    if [ -d /boot/efi/EFI ];
    then
        echo "$i" >> /tmp/efi-partitions
    fi
    umount -l /boot/efi
done

# Unmount all non-swap, non-squashfs, and non-CD-ROM partitions
for i in $(blkid | grep -v 'TYPE="swap"'| grep -v 'TYPE="squashfs"' | grep -v '^/dev/sr0' | cut -f1 -d":")
do
    umount "$i"
done

# boot EFI without partition EFI
if [ -d /sys/firmware/efi ] && [ "$(cat /tmp/efi-partitions)" = "" ] ;
then
LIVEBOOT=EFI
PARTITION=LEGACY

TEXT_01=$"Do you want to proceed with the installation in EFI mode?"
TEXT_02=$"The current boot is using <span color='#CC2222'>EFI</span> mode, but I did not find any EFI partition on this computer.

If this computer already has another system installed and you intend 
to keep it installed, you will probably need to change the 
configuration in the BIOS to boot in Legacy mode, also 
called BIOS mode."
yad --image=drive-harddisk --image-on-top --form --width=500 --height=100 --fixed \
--align=center \
--field="<b>$TEXT_01</b>
:LBL" \
--text "$TEXT_02
" \
--button=$"Continue"!gtk-apply:0 \
--button=$"Close"!gtk-cancel:1 \
--center --on-top --borders=20 --title=$"Install the system" \
--window-icon="/usr/share/icons/hicolor/scalable/apps/icon-big-hd-install.svg"

    if [ "$?" = "1" ]; then
        exit
    fi
fi

# legacy boot and EFI partition
if [ ! -d /sys/firmware/efi ] && [ "$(cat /tmp/efi-partitions)" != "" ]; then
LIVEBOOT=LEGACY
PARTITION=EFI
TEXT_03=$"Do you want to proceed with the installation in Legacy/BIOS mode?"
TEXT_04=$"The current boot is using <span color='#CC2222'>Legacy/BIOS</span> mode, but I found at least one EFI partition on this computer. 

For the installation to be successful, you will probably need to 
change the configuration in the BIOS to boot in EFI or UEFI mode."
yad --image=drive-harddisk --image-on-top --form --width=500 --height=100 --fixed \
--align=center \
--field="<b>$TEXT_03</b>
:LBL" \
--text "$TEXT_04
" \
--button=$"Continue"!gtk-apply:0 \
--button=$"Close"!gtk-cancel:1 \
--center --on-top --borders=20 --title=$"Install the system" \
--window-icon="/usr/share/icons/hicolor/scalable/apps/icon-big-hd-install.svg"

    if [ "$?" = "1" ]; then
        exit
    fi
fi

# fix crc32c-intel in kernel 6.14+
kernel_ver=$(uname -r | sed -E 's/([0-9]+).([0-9]+).*/\1\2/g')
if [ "$kernel_ver" -gt "613" ];then
     sed -i 's/crc32c-intel/crc32c/' /usr/lib/calamares/modules/initcpiocfg/main.py
fi

rm -f /tmp/start_calamares

# Launch the BigBashView interface
cd /usr/share/bigbashview/apps/calamares/
bigbashview -s 1100x600 -n $"Install System" -p bbv-calamares -c transparent -w frameless index.html

# Start Calamares installation if flagged
if [ -e "/tmp/start_calamares" ]; then
    if [ -e /usr/share/biglinux/themes/biglinux/.config/kdeglobals ]; then
        cp -f /usr/share/biglinux/themes/biglinux/.config/kdeglobals /root/.config/kdeglobals
        cp -Rf /usr/share/biglinux/themes/biglinux/.config/Kvantum /root/.config/Kvantum
    else
        cp -f /etc/skel/.config/kdeglobals /root/.config/kdeglobals
        cp -Rf /etc/skel/.config/Kvantum /root/.config/Kvantum
    fi

    sudo QT_QPA_PLATFORMTHEME=kde QT_QUICK_BACKEND=software dbus-launch /usr/bin/calamares-manjaro

    # Copy the installation log to the user's home directory
    cp /root/.cache/calamares/session.log /home/$user/calamares_complete.log
    chown $user:$user /home/$user/calamares_complete.log

    # Check if the installation succeeded
    if [ "$(grep -w completion /root/.cache/calamares/session.log | grep -v bash-completion | rev | cut -d ":" -f1 | rev | sed 's/^[ \t]*//;s/[ \t]*$//')" != "succeeded" ];then
        cp /root/.cache/calamares/session.log /home/$user/calamares_error.log
        chown $user:$user /home/$user/calamares_error.log

        # Function to send the error log to the cloud
        send_log() {
            # Upload the file to filebin.net
            sudo -u $user curl --data-binary -H "filename: /home/$user/calamares_error.log" https://filebin.net | tee "/home/$user/transfer.url" | zenity --modal --progress --pulsate --no-cancel --auto-close --text $"Sending, please wait..."
            
            # Retrieve the file URL
            fileUrl="https://filebin.net/$(cat "/home/$user/transfer.url" | grep '"id": "' | cut -f4 -d'"')"
            
            # Search for installed browsers
            if [ -f /usr/bin/firefox ]; then
                sudo -u $user firefox "$fileUrl"
            elif [ -f /usr/bin/brave ]; then
                sudo -u $user brave --new-window "$fileUrl"
            elif [ -f /usr/bin/google-chrome ]; then
                sudo -u $user google-chrome --new-window "$fileUrl"
            elif [ -f /usr/bin/chromium ]; then
                sudo -u $user chromium --new-window "$fileUrl"
            elif [ -f /usr/bin/falkon ]; then
                sudo -u $user falkon "$fileUrl"
            else
            # If no browser is found, display the URL to the user
            yad --info \
                --title=$"Log Sent" \
                --text=$"Log successfully sent!\n\nURL: $fileUrl\n\nYou can use this URL to share the log." \
                --width=400 \
                --center \
                --button=gtk-ok:0
            fi
        }

        # Handle specific efibootmgr errors
        if grep -q 'grub-install: error: efibootmgr failed to register the boot entry: Input/output error.' /home/$user/calamares_error.log; then

        yad --buttons-layout=center \
            --width=480 \
            --button=$"Open the EFI manager":1 \
            --button=$"Close":2 \
            --title=$"calamares LOG" \
            --text=$"\nIt was not possible to write the EFI entry to the motherboard, likely due to insufficient space.\n\nCheck the EFI manager for any entries that can be deleted and try installing the system again.\n"
            
        case $? in
            1) sudo QEFIEntryManager ;;
            2) echo $"Don't open QEFIEntryManager..." ;;
        esac
        
        fi

        # Prompt the user to view or send the log
        yad --buttons-layout=center \
            --width=480 \
            --button=$"Open":1 \
            --button=$"Send to the cloud":2 \
            --button=$"Close":3 \
            --title=$"calamares LOG" \
            --text=$"\nDo you want to view or send the installation log file to the cloud?\nGenerate a link to send in support groups.\n"

        case $? in
            1) sudo -u $user $text_editor /home/$user/calamares_error.log ;;
            2) send_log ;;
            3) echo "Closing file..." ;;
        esac
    fi
fi
